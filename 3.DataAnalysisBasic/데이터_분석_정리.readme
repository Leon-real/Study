# 데이터분석 ‘A~Z’ 간단 요약

1. 도메인의 이해
2. 데이터 분석
3. 시사점 도출

## 1. 도메인의 이해

해당 데이터의 의미를 파악하고 각 데이터가 나타내는 것이 무엇인지 파악해야 한다.  
예를 들어 `산소농도.csv` 파일 안에 `PM10` 이라는 컬럼이 있을 때,   
이 컬럼이 의미 하는 바가 무엇인지 파악하여야 정확한 데이터 분석을 할 수 있다.  

각 도메인에 따라 사용하는 용어나 지식 등이 다르기 때문에,  
데이터 분석 이전에 도메인에 대한 이해를 하고,  
데이터 분석을 진행하는 것이 분석에 용이할 수 있다.  

## 2. 데이터 분석

1. 가설 설정
귀무가설과 대립가설은 아래와 같이 간단하게 이해하면 좋다.
    1. 귀무 가설 : 차이가 없다, 연관성이 없다, 효과가 없다.  
    (A와 B간에는 연관성이 있다.)
    2. 대립 가설 : 차이가 있다, 연관성이 있다, 효과가 있다.  
    (A와 B간에는 연관성이 없다.
2. 단변량 분석
    
    단변량 분석은 데이터 분석의 매우 기초적인 분석 기법으로, 
    **독립적인 개별 변수**가 가지고 있는 **특성**들을 이해하는 과정이다.
    
    따라서, 아래 사항에 맞춰 단변량 분석을 진행하면,  
    추후 분석 단계를 편안히 진행할 수 있다.  
    
    1. 변수가 내포하고 있는 의미
    2. 변수가 수치형인지, 범주형인지
    3. 결측치 확인 및 조치
    4. 기초 통계량 확인  
    5. 데이터 분포 확인
    6. 위 정보로부터 파악한 내용 정리
    7. 추가 분석 사항 도출
3. 이변량 분석
    단변량 분석을 토대로,   
    X → Y 에 대하여 시각화와 수치화(가설검정)을 수행한다.

    자료의 종류(수치형, 범주형)에 맞게 그래프를 그려서 시각화를 한 뒤,  
    가설 검정을 수행한다.
    ```python
        import pandas as pd
        import numpy as np
        import matplotlib.pyplot as plt
        import seaborn as sns
        import scipy.stats as spst

        # 수치 -> 수치
        sns.scatterplot(x='열이름', y='열이름', data=데이터프레)

        데이터프레임.corr()
        sns.heatmap(데이터프레임, 
                    annot = True,            # 숫자(상관계수) 표기 여부
                    fmt = '.3f',             # 숫자 포멧 : 소수점 3자리까지 표기
                    cmap = 'RdYlBu_r',       # 칼라맵
                    vmin = -1, vmax = 1)     # 값의 최소, 최대값값

        # 수치 -> 범주
        sns.histplot(x='열이름', data = 데이터프레임, hue = '열이름')
        sns.kdeplot(x='열이름', data = 데이터프레임, hue = '열이름')
        sns.kdeplot(x='열이름', data = 데이터프레임, hue = '열이름', common_norm = False)

        # 범주 -> 범주
        mosaic(titanic, [ '열이름','열이름'])
        temp = pd.crosstab(데이터프레임[열이름], 데이터프레임[열이름], normalize = 'index')

        # 범주 -> 수치
        sns.barplot(x="열이름", y="열이름", data=데이터프레임)
    ```

4. 가설 검증
    
    가설 검정시 아래 항목을 참조하여 수행한다.
    
    ```
    * 유의수준 : 5%
        * **숫자 --> 숫자 : 상관분석**
        * **범주 --> 범주 : 카이제곱검정**
        * **범주 --> 숫자 : t검정, 분산분석**
        * **숫자 --> 범주 : 로지스틱 회귀모형을 통해, 회귀계수의 P.value로 검정을 수행합니다.**
    * 상관계수 (우리가 배운 기준)
        * 강한: 0.5 < |r| <= 1
        * 중간: 0.2 < |r| <= 0.5
        * 약한: 0.1 < |r| <= 0.2
        * (거의)없음: |r| <= 0.1
    * p-value 기준 판단 기준
        * P-value < 0.05이면, 두 변수 간에 관계가 있다. (상관계수가 의미가 있다.)
        * P-value >= 0.05이면, 두 변수 간에 관계가 없다. (상관계수가 의미가 없다.)
    ```

    ```python
        import pandas as pd
        import numpy as np
        import matplotlib.pyplot as plt
        import seaborn as sns
        import scipy.stats as spst

        # 수치 -> 수치 : 상관분석
            spst.pearsonr(데이터프레임[열이름], 데이터프레임[열이름])

        # 수치 -> 범주 : 로지스틱 회귀모형

        # 범주 -> 범주 : 카이검정 제곱
            def chi2(var,target,data):
                table = pd.crosstab(data[target], data[var])
                print(table)
                print('-' * 50)

                # 2) 카이제곱검정
                print(spst.chi2_contingency(table))

        # 범주 -> 수치 : t검정, 분산분
            # 2개의 그룹일 경우
            died = temp.loc[temp['열이름']==0, '열이름']
            survived = temp.loc[temp['열이름']==1, '열이름']

            # t-test 실행
            spst.ttest_ind(survived, died)

            # 3개의 그룹일 경
            # 1) 분산 분석을 위한 데이터 만들기
            # NaN 행 제외
            데이터프레임temp= 데이터프레임.loc[데이터프레임['열이름'].notnull()]
            # 그룹별 저장
            P_1 = 데이터프레임temp=.loc[데이터프레임temp=.열이름== 1, '열이름']
            P_2 = 데이터프레임temp=.loc[데이터프레임temp=.열이름== 2, '열이름']
            P_3 = 데이터프레임temp=.loc[데이터프레임temp=.열이름 == 3, '열이름']

            spst.f_oneway(P_1, P_2, P_3)
    ```
## 3. 시사점 도출

데이터 분석을 바탕으로 시사점을 도출한다.